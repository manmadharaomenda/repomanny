{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable1",
						"type": "DatasetReference"
					},
					"name": "sourceproduct"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "targetdimproduct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable3",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "findinngnotmatchrecords"
				},
				{
					"name": "split1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          pid as integer,",
				"          pname as string,",
				"          modifieddate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> sourceproduct",
				"source(output(",
				"          pkey as integer,",
				"          pid as integer,",
				"          pname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> targetdimproduct",
				"sourceproduct, targetdimproduct lookup(sourceproduct@pid == targetdimproduct@pid,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> findinngnotmatchrecords",
				"findinngnotmatchrecords split(isMatch(),",
				"     disjoint: false) ~> split1@(match, notmatch)",
				"select1 keyGenerate(output(surrowgate as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"split1@notmatch select(mapColumn(",
				"          pid = split1@notmatch@pid,",
				"          pname = split1@notmatch@pname",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"surrogateKey1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          pkey as integer,",
				"          pid as integer,",
				"          pname as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          pkey = surrowgate,",
				"          pid,",
				"          pname",
				"     )) ~> sink1"
			]
		}
	}
}